#This policy uses the Sentinel tfplan/v2 import to require that
# all GCE compute instances have all mandatory labels

# Note that the comparison is case-sensitive but also that GCE labels are only
# allowed to contain lowercase letters, numbers, hypens, and underscores.

# Import tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "strings"
import "types"
import "json"

# Resource Types Region Map
allowed_prefix = ["group:", "serviceAccount:"]

resourceTypesIamMap = {
	"google_project_iam_policy": {
		"keys": ["policy_data", "members"],
	},
	"google_project_iam_binding": {
		"keys": ["member", "members"],
	},
	"google_project_iam_member": {
		"keys": ["member", "members"],
	},
	"google_organization_iam_policy": {
		"keys": ["policy_data", "members"],
	},
	"google_organization_iam_binding": {
		"keys": ["member", "members"],
	},
	"google_organization_iam_member": {
		"keys": ["member", "members"],
	},
}

allResources = {}
for resourceTypesIamMap as rt, _ {
	resources = plan.find_resources(rt)
	for resources as address, rc {
		allResources[address] = rc
	}
}
violations = {}
check_for_member = func(address, rc, mkey) {
	members_list = []

	member = plan.evaluate_attribute(rc.change.after, mkey)
	#print(member)
	#print(types.type_of(member))
	is_list = rule { types.type_of(member) is "list" }
	is_string = rule { types.type_of(member) is "string" }
	if is_string and strings.has_prefix(member, "{") {
		a = json.unmarshal(member)
		#print(a)
		#print (types.type_of(a))
		for a as ad, lp {
			for lp as rt {
				mem = plan.evaluate_attribute(rt, "members")
				#print(mem)
				members_list = mem
			}
		}
	} else {

		if is_string {
			append(members_list, member)

		}
		if is_list {
			members_list = member

		}

	}
	#print(members_list)
	for members_list as lst {
		print(lst)
		for allowed_prefix as prfx {
			if not strings.has_prefix(lst, prfx) {
				violations[address] = rc
			}
		}
	}
	return violations
}

for allResources as address, rc {
	type = rc["type"]
	for resourceTypesIamMap[type]["keys"] as mkey {
		#print(mkey)

		msg = check_for_member(
			address,
			rc,
			mkey,
		)
	}
}

GCP_IAM_ENTITY = rule { length(violations) is 0 }

# Main rule
main = rule { GCP_IAM_ENTITY }
