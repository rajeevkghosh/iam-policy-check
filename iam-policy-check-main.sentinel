#This policy uses the Sentinel tfplan/v2 import to require that
# all GCE compute instances have all mandatory labels

# Note that the comparison is case-sensitive but also that GCE labels are only
# allowed to contain lowercase letters, numbers, hypens, and underscores.

# Import tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "strings"
import "types"

prefix = ["us-"]
multi_region_var = ["US"]

# Resource Types Region Map

resourceTypesIamMap = {

	"google_project_iam_policy": {
		"key1": "policy_data",
		"key2": "members",
	},
	"google_project_iam_binding": {
		"key1": "member",
		"key2": "members",
	},
	"google_project_iam_member": {
		"key1": "member",
		"key2": "members",
	},
	"google_organization_iam_policy": {
		"key1": "policy_data",
		"key2": "members",
	},
	"google_organization_iam_binding": {
		"key1": "member",
		"key2": "members",
	},
	"google_organization_iam_member": {
		"key1": "member",
		"key2": "members",
	},
}

allResources = {}
for resourceTypesIamMap as rt, _ {
	resources = plan.find_resources(rt)
	for resources as address, rc {
		allResources[address] = rc
	}
}

#print (allResources)

string_handler = func(member) {
	arr = []
	a = strings.split(member, "\"")
	//print(a)
	//print(types.type_of(a))

	for a as rt {

		if strings.has_prefix(rt, "user") or strings.has_prefix(rt, "group") or strings.has_prefix(rt, "serviceAccount") {
			#append(arr, rt)
			arr = rt

		}
	}
	/*for arr as rp {
		#print (rp)
		arr = rp
	}*/
	return arr

}

#is_undefined = rule { types.type_of(location) is "undefined" }
check_for_location = func(address, rc, key1, key2) {
	violations = {}
	users = []
	return_users = []
	member = plan.evaluate_attribute(rc.change.after, key1)
	#print(types.type_of(member))

	members = plan.evaluate_attribute(rc.change.after, key2)
	#print(types.type_of(members))
	#print(members)
	is_list = rule { types.type_of(members) is "list" }
	if is_list {
		append(users, members)
	}

	is_undefined = rule { types.type_of(members) is "undefined" }
	#print(is_undefined)

	if is_undefined {

	} else {

		#print(members)
	}

	is_string = rule { types.type_of(member) is "string" }
	if is_string {
		ab = string_handler(member)
		#print(ab)
		append(users, ab)
	} else {

		append(users, member)
	}
	#print(users)

	return users

}

#msgs = {}
violations = {}
lst = []
for allResources as address, rc {
	msg = check_for_location(
		address,
		rc,
		resourceTypesIamMap[rc["type"]]["key1"],
		resourceTypesIamMap[rc["type"]]["key2"],
	)
	#print(msg)
	for msg as rp {
		#print (rp)
		is_lst = rule { types.type_of(rp) is "list" }
		is_null = rule { types.type_of(rp) is "null" }

		if is_lst {
			for rp as st {
				print(st)

				if strings.has_prefix(st, "user") {
					violations[address] = rc
				}

			}
		} else {

			print(rp)

			if not is_null {

				if strings.has_prefix(rp, "user") {
					violations[address] = rc
				}
			}

		}

	}
}

GCP_RES_LOCATION = rule { length(violations) is 0 }

# Main rule
main = rule { GCP_RES_LOCATION }
